NOTAS

Inicia archivo Vagrant--->

vagrant init ubuntu/bionic64

----------------------------------------------Archivo Vagrant--------------------------------------------------->

# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
 # The most common configuration options are documented and commented below.
 # For a complete reference, please see the online documentation at
 # https://docs.vagrantup.com.

 # Every Vagrant development environment requires a box. You can search for
 # boxes at https://vagrantcloud.com/search.
 config.vm.box = "ubuntu/bionic64"
 config.vm.box_version = "~> 20200304.0.0"

 config.vm.network "forwarded_port", guest: 8000, host: 8000

 config.vm.provision "shell", inline: <<-SHELL
   systemctl disable apt-daily.service
   systemctl disable apt-daily.timer

   sudo apt-get update
   sudo apt-get install -y python3-venv zip
   touch /home/vagrant/.bash_aliases
   if ! grep -q PYTHON_ALIAS_ADDED /home/vagrant/.bash_aliases; then
     echo "# PYTHON_ALIAS_ADDED" >> /home/vagrant/.bash_aliases
     echo "alias python='python3'" >> /home/vagrant/.bash_aliases
   fi
 SHELL
end

----------------------------------------------------------------------------------------------------------------->
Para descargar imagen especificada en VagrantFile-->
vagrant up

Para conectarse a vagrant-->
vagrant ssh

Para salir-->
exit

Para crear entorno virtual (Se crea en la maquina virtual, y en ~/env para que no se sincronice con la el local)
python -m venv ~/env

Asi se activa-->
source ~/env/bin/activate

Asi se desactiva-->
 deactivate

Se crea requirements.txt asi--->
django==2.2
djangorestframework==3.9.2

Y se instala con el entorno virtual activado-->
 pip install -r requirements.txt

Creo proyecto de django-->
profiles_project es el nombre
. donde lo creo
 django-admin.py startproject profiles_project .


Creo una nueva API-->
python manage.py startapp profiles_api


Ahora necesito habilitar la api en el proyecto de django
En profiles_project/settings.py agrego-->

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'profiles_api',
]

Inicio el servidor asi-->
0.0.0.0 Hagalo disponible en todo los adaptadores de red en nuestro servidor,
:8000 En el puerto 8000

python manage.py runserver 0.0.0.0:8000

En chrome busco esta direccion y me muestra el proyecto de django-->
http://127.0.0.1:8000/


MODELOS en django-->
Escribimos los modelos para estructurar los datos que guardaremos, y django se encarga de interactuar con la base de datos para
no tener que hacerlo uno directamente.

En profiles_api --->

from django.db import models
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin

class UserProfile(AbstractBaseUser, PermissionsMixin):
    """Modelo de base de datos para usuarios en el sistema"""
    email = models.EmailField(max_length=255, unique=True)
    name = models.CharField(max_length=255)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    """Especificar el model manager para el usuario, para que sepa como crear y controlar usuarios,
    esta clase la creo despues"""
    objects = UserProfileManager()

    """Override de algunos campos, USERNAME_FIELD se requiere entonces hago que se requiera email y name"""
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    def get_full_name(self):
        """Retrieve full name of user"""
        return self.name

    def get_short_name(self):
        return self.name

    def __str__(self):
        """ String representation of our model, item that we want to return when we convert user_profile object
        to a string in python. Devuelve identificador  """
        return self.email


Creamos un UserProfileManager--->
En el futuro en django desde el cli se creara superuser que podrá ver todos los modelos y tendra todos los permisos

Como se hizo override de USERNAME_FIELD se debe especificar a Django como manejar este
Agregamos a moldels -->

from django.contrib.auth.models import BaseUserManager


class UserProfileManager(BaseUserManager):
    """Manager for user profiles"""

    def create_user(self, email, name, password=None):
        """Create a new user profile"""
        if not email:
            raise ValueError('Users must have an email address')

        email = self.normalize_email(email)
        user = self.model(email=email, name= name)

        user.set_password(password)
        user.save(using=self._db)

        return user

    def create_superuser(self, email, name, password):
        """Create superuser"""
        user = self.create_user(email, name, password)

        user.is_superuser = True
        user.is_staff = True
        user.save(using=self._db)

        return user


Para decirle a Django que utilice el modelo custom que se acaba de crear en vez de el default -->
En profiles_project/settings se agrega-->

AUTH_USER_MODEL = 'profiles_api.UserProfile'

Para hacer los pasos necesarios para hacer las migraciones-->
python manage.py makemigrations profiles_api

Para realmente hacer las migraciones-->
python manage.py migrate


Creando superusuarios--->
python manage.py createsuperuser

We can enable the django admin to use our user profile by-->
En profiles_api/admin-->

from profiles_api import models

admin.site.register(models.UserProfile)

Voy a http://127.0.0.1:8000/admin y puedo ver los modelos existentes y las instancias creadas.


API View--->
- Describe logic to make API endpoint
- Allow to customize functions that match http methods.
- Gives more controll over logic.
- Caliing other APIs
- Working with local files or data


Hago profiles_api/views.py

from rest_framework.views import APIView
from rest_framework.response import Response


class HelloApiView(APIView):
    """Test API View """

    def get(self, request, format=None):
        """Returns a list of APIView features"""
        an_apiview = [
            'Uses HTTP methods as function (get, post, patch, put, delete)',
            'Hola',
            'Como',
            'Estas'
        ]

        return Response({'message': 'Hellossss', 'an_apiview': an_apiview})

Agrego en profiles_project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('profiles_api.urls'))
]

Agrego en profiles_api/urls.py

from django.urls import path
from profiles_api import views

urlpatterns = [
    path('hello-view/', views.HelloApiView.as_view())
]


SERIALIZERS-->
- Son una forma de convertir String a un Objeto de python y viceversa.
- Tambien se encargan de la validación de los tipos y especificaciones de los inputs

En profiles_api/serializers.py -->

from rest_framework import serializers

class HelloSerializer(serializers.Serializer):
    """ Serializes a name field for testing our APIView"""
    name = serializers.CharField(max_length= 10)


Se añade el metodo post a los views usando el serializer
Se debe agregar el serializer a la variable serializer_class, si es otra no funciona.
En profiles_api/views.py -->

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from profiles_api import serializers



class HelloApiView(APIView):
    """Test API View """

    serializer_class = serializers.HelloSerializer

    def get(self, request, format=None):
        """Returns a list of APIView features"""
        an_apiview = [
            'Uses HTTP methods as function (get, post, patch, put, delete)',
            'Hola',
            'Como',
            'Estas'
        ]

        return Response({'message': 'Hello', 'an_apiview': an_apiview})

    def post(self, request):
        """Create a hello message with our name"""
        serializer = self.serializer_class(data=request.data)

        if serializer.is_valid():
            name = serializer.validated_data.get('name')
            message = f'Hello {name}'
            return Response({'message': message})
        else:
            return Response(
                serializer.errors,
                status=status.HTTP_400_BAD_REQUEST
            )
